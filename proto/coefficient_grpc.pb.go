// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/coefficient.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoefficientService_UpdateCoefficient_FullMethodName        = "/coefficient.CoefficientService/UpdateCoefficient"
	CoefficientService_GetMarketCoefficient_FullMethodName     = "/coefficient.CoefficientService/GetMarketCoefficient"
	CoefficientService_StreamCoefficientUpdates_FullMethodName = "/coefficient.CoefficientService/StreamCoefficientUpdates"
)

// CoefficientServiceClient is the client API for CoefficientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoefficientServiceClient interface {
	UpdateCoefficient(ctx context.Context, in *UpdateCoefficientRequest, opts ...grpc.CallOption) (*UpdateCoefficientResponse, error)
	GetMarketCoefficient(ctx context.Context, in *GetMarketCoefficientRequest, opts ...grpc.CallOption) (*GetMarketCoefficientResponse, error)
	StreamCoefficientUpdates(ctx context.Context, in *StreamCoefficientRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CoefficientUpdateEvent], error)
}

type coefficientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoefficientServiceClient(cc grpc.ClientConnInterface) CoefficientServiceClient {
	return &coefficientServiceClient{cc}
}

func (c *coefficientServiceClient) UpdateCoefficient(ctx context.Context, in *UpdateCoefficientRequest, opts ...grpc.CallOption) (*UpdateCoefficientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCoefficientResponse)
	err := c.cc.Invoke(ctx, CoefficientService_UpdateCoefficient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coefficientServiceClient) GetMarketCoefficient(ctx context.Context, in *GetMarketCoefficientRequest, opts ...grpc.CallOption) (*GetMarketCoefficientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketCoefficientResponse)
	err := c.cc.Invoke(ctx, CoefficientService_GetMarketCoefficient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coefficientServiceClient) StreamCoefficientUpdates(ctx context.Context, in *StreamCoefficientRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CoefficientUpdateEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CoefficientService_ServiceDesc.Streams[0], CoefficientService_StreamCoefficientUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamCoefficientRequest, CoefficientUpdateEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoefficientService_StreamCoefficientUpdatesClient = grpc.ServerStreamingClient[CoefficientUpdateEvent]

// CoefficientServiceServer is the server API for CoefficientService service.
// All implementations must embed UnimplementedCoefficientServiceServer
// for forward compatibility.
type CoefficientServiceServer interface {
	UpdateCoefficient(context.Context, *UpdateCoefficientRequest) (*UpdateCoefficientResponse, error)
	GetMarketCoefficient(context.Context, *GetMarketCoefficientRequest) (*GetMarketCoefficientResponse, error)
	StreamCoefficientUpdates(*StreamCoefficientRequest, grpc.ServerStreamingServer[CoefficientUpdateEvent]) error
	mustEmbedUnimplementedCoefficientServiceServer()
}

// UnimplementedCoefficientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoefficientServiceServer struct{}

func (UnimplementedCoefficientServiceServer) UpdateCoefficient(context.Context, *UpdateCoefficientRequest) (*UpdateCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoefficient not implemented")
}
func (UnimplementedCoefficientServiceServer) GetMarketCoefficient(context.Context, *GetMarketCoefficientRequest) (*GetMarketCoefficientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketCoefficient not implemented")
}
func (UnimplementedCoefficientServiceServer) StreamCoefficientUpdates(*StreamCoefficientRequest, grpc.ServerStreamingServer[CoefficientUpdateEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCoefficientUpdates not implemented")
}
func (UnimplementedCoefficientServiceServer) mustEmbedUnimplementedCoefficientServiceServer() {}
func (UnimplementedCoefficientServiceServer) testEmbeddedByValue()                            {}

// UnsafeCoefficientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoefficientServiceServer will
// result in compilation errors.
type UnsafeCoefficientServiceServer interface {
	mustEmbedUnimplementedCoefficientServiceServer()
}

func RegisterCoefficientServiceServer(s grpc.ServiceRegistrar, srv CoefficientServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoefficientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoefficientService_ServiceDesc, srv)
}

func _CoefficientService_UpdateCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoefficientServiceServer).UpdateCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoefficientService_UpdateCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoefficientServiceServer).UpdateCoefficient(ctx, req.(*UpdateCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoefficientService_GetMarketCoefficient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketCoefficientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoefficientServiceServer).GetMarketCoefficient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoefficientService_GetMarketCoefficient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoefficientServiceServer).GetMarketCoefficient(ctx, req.(*GetMarketCoefficientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoefficientService_StreamCoefficientUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCoefficientRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoefficientServiceServer).StreamCoefficientUpdates(m, &grpc.GenericServerStream[StreamCoefficientRequest, CoefficientUpdateEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CoefficientService_StreamCoefficientUpdatesServer = grpc.ServerStreamingServer[CoefficientUpdateEvent]

// CoefficientService_ServiceDesc is the grpc.ServiceDesc for CoefficientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoefficientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coefficient.CoefficientService",
	HandlerType: (*CoefficientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCoefficient",
			Handler:    _CoefficientService_UpdateCoefficient_Handler,
		},
		{
			MethodName: "GetMarketCoefficient",
			Handler:    _CoefficientService_GetMarketCoefficient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCoefficientUpdates",
			Handler:       _CoefficientService_StreamCoefficientUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/coefficient.proto",
}
